AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ProjectSlug:
    Type: String
    Description: |
      A one word name of the project. Will be used for root object name in
      buckets and other places.
    Default: "weboftomorrow"
    AllowedPattern: "[a-z0-9]+"
    MinLength: 3
    MaxLength: 50
  BlueVersion:
    Type: String
    Description: |
      A version number for the existing production site that will be replaced.
    Default: "0.8.1"
  GreenVersion:
    Type: String
    Description: |
      A version number for the new production site that will be deployed.
    Default: "0.8.2"
  GitHubCloneURL:
    Type: String
    Description: |
      The https clone URL for the project.
    Default: ""

  CodeDeployServiceRole:
    Type: String
    Description: |
      ARN of an existing IAM Service Role to be associated with CodeBuild.
      Example: "arn:aws:iam::12341234:role/codebuild_service_role"
    Default: ""
    AllowedPattern: "^arn:aws:iam:.*$|^$"
  SecretHeaderString:
    Type: String
    Description: |
      Secret string in the Referer header that Cloudfront will use. This blocks
      public access of the static sites bucket unless the Referer header with
      this string is used.
    Default: "None shall pass."

  HostedZoneId:
    Type: 'AWS::Route53::HostedZone::Id'
    Description: An Amazon Route 53 hosted zone ID, such as Z23YXV4OVPL04A.

  StaticSiteFilesBucketName:
    Type: String
    Description: |
      Set to an existing name of a static site files bucket name. It will create
      a new one if this is blank.
    Default: ""
  BuildArtifactBucketName:
    Type: String
    Description: |
      Set to an existing name of a build artifact bucket name. It will create
      a new one if this is blank.
    Default: ""
Conditions:
  CreateStaticSiteBucket: !Not [!Equals [!Ref StaticSiteFilesBucketName, ""]]
  CreateBuildArtifactsBucket: !Not [!Equals [!Ref BuildArtifactBucketName, ""]]
Resources:
  #StaticSiteDomainProduction:
  #  Type: AWS::Route53::RecordSet
  #  Properties:
  #   HostedZoneId: !Ref HostedZoneId
  #    Name: www.weboftomorrow.com.
  #    Type: A
  #    AliasTarget:
  #      # Z2FDTNDATAQYW2 is the hosted zone id of cloudfront domain name.
  #      HostedZoneId: Z2FDTNDATAQYW2
  #      DNSName: !GetAtt CloudfrontProduction.DomainName
  StaticSiteDomainStaging:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: staging.weboftomorrow.com.
      Type: A
      AliasTarget:
        # Z2FDTNDATAQYW2 is the hosted zone id of cloudfront domain name.
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudfrontStaging.DomainName

  # Create a bucket and policy to allow the cloudfront distribution to use it as
  # an origin.  Direct public access to the bucket is blocked by a simple
  # Referer header with a secret string.
  StaticSiteFiles:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [CreateStaticSiteBucket, !Ref StaticSiteFilesBucketName, !Ref "AWS::NoValue"]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: 'error.html'
        IndexDocument: 'index.html'
  StaticSiteFilesPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref StaticSiteFiles
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Action: "s3:GetObject"
            Effect: "Allow"
            Principal: "*"
            Resource: !Join ['', [!GetAtt StaticSiteFiles.Arn, !Sub "/${ProjectSlug}/*"]]
            Condition:
              StringLike:
                "aws:referer": !Ref SecretHeaderString

  BuildArtifacts:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [CreateBuildArtifactsBucket, !Ref BuildArtifactBucketName, !Ref "AWS::NoValue"]
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            NoncurrentVersionExpirationInDays: 2
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  StaticBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: S3
        Location: !Ref BuildArtifacts
        Name: !Ref ProjectSlug
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 10
      ServiceRole: !Ref CodeDeployServiceRole
      Source:
        Auth:
          Type: OAUTH
        GitCloneDepth: 1
        Location: !Ref GitHubCloneURL
        Type: GITHUB
      TimeoutInMinutes: 10
      Triggers:
        Webhook: true

  #TODO: create code pipeline

  # Cloudfront distribution with an origin group. The origins in the origin
  # group are swapped when doing blue-green deployments.
  CloudfrontStaging:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: !Sub "staging-${ProjectSlug}-origin-group"
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: all
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_100
        OriginGroups:
          Items:
            -
              FailoverCriteria:
                StatusCodes:
                  Items:
                    - 404
                  Quantity: 1
              Id: !Sub "staging-${ProjectSlug}-origin-group"
              Members:
                Items:
                  -
                    OriginId: !Sub "blue-${ProjectSlug}-staging-origin-id"
                  -
                    OriginId: !Sub "green-${ProjectSlug}-staging-origin-id"
                Quantity: 2

          Quantity: 2
        Origins:
          -
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            Id: !Sub "blue-${ProjectSlug}-staging-origin-id"
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${BlueVersion}"

          -
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            Id: !Sub "green-${ProjectSlug}-staging-origin-id"
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${GreenVersion}"

        CacheBehaviors:
          -
            PathPattern: '*/'
            TargetOriginId: !Sub "staging-${ProjectSlug}-origin-group"
            ViewerProtocolPolicy: allow-all
            MinTTL: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: all
          #-
          #  PathPattern: '/'
          #  TargetOriginId: !Sub "staging-${ProjectSlug}-origin-group"
          #  ViewerProtocolPolicy: allow-all
          #  MinTTL: 0
          #  ForwardedValues:
          #    QueryString: false
          #    Cookies:
          #      Forward: all
Outputs:
  StagingWebsiteURL:
    Value: !Ref StaticSiteDomainStaging
