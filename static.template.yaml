AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ProjectSlug:
    Type: String
    Description: |
      A one word name of the project. Will be used for root object name in
      buckets and other places. The Parameter Store in AWS Systems Manager will
      use this as the prefix (like /weboftomorrow/) for parameters.
    Default: "weboftomorrow"
    AllowedPattern: "[a-z0-9]+"
    MinLength: 3
    MaxLength: 50
  BlueVersion:
    Type: String
    Description: |
      A version number for the existing production site that will be replaced.
    Default: "0.8.1"
  GreenVersion:
    Type: String
    Description: |
      A version number for the new production site that will be deployed.
    Default: "0.8.2"
  GitHubCloneURL:
    Type: String
    Description: |
      The https clone URL for the project.
    Default: ""

  SecretHeaderString:
    Type: String
    Description: |
      Secret string in the Referer header that CloudFront will use when
      accessing files from the S3 bucket. This blocks direct public access of
      the static sites bucket unless the Referer header with this string is
      used.
    Default: "None shall pass."

  HostedZoneId:
    Type: 'AWS::Route53::HostedZone::Id'
    Description: An Amazon Route 53 hosted zone ID, such as Z23YXV4OVPL04A.
    AllowedPattern: ".+"

  StaticSiteFilesBucketName:
    Type: String
    Description: |
      Set to an existing name of a static site files bucket name. It will create
      a new one if this is blank. This bucket will be configured for static
      website hosting. Files are placed in a root directory named as the
      ProjectSlug.
    Default: ""
  BuildArtifactBucketName:
    Type: String
    Description: |
      Set to an existing name of a build artifact bucket name. It will create
      a new one if this is blank. The build artifacts are placed in a root
      directory named as the ProjectSlug and expire after a day.
    Default: ""
  ManualVerificationEmail:
    Type: String
    Description: |
      Email address to send a notification to when the staging site needs to be
      manually verified.
    Default: ""

  PatternToTriggerBuild:
    Type: String
    Default: "^refs/heads/release/.+$"
    Description: |
      Set the git branch or tags pattern that will trigger a build.

Conditions:
  CreateStaticSiteBucket: !Not [!Equals [!Ref StaticSiteFilesBucketName, ""]]
  CreateBuildArtifactsBucket: !Not [!Equals [!Ref BuildArtifactBucketName, ""]]
Resources:
  # Create a bucket and policy to allow the cloudfront distribution to use it as
  # an origin.  Direct public access to the bucket is blocked by a simple
  # Referer header with a secret string.
  StaticSiteFiles:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [CreateStaticSiteBucket, !Ref StaticSiteFilesBucketName, !Ref "AWS::NoValue"]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: !Sub "${ProjectSlug}/production/error.html"
        IndexDocument: 'index.html'
  StaticSiteFilesPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref StaticSiteFiles
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Action: "s3:GetObject"
            Effect: "Allow"
            Principal: "*"
            Resource: !Join ['', [!GetAtt StaticSiteFiles.Arn, !Sub "/${ProjectSlug}/*"]]
            Condition:
              StringLike:
                "aws:referer": !Ref SecretHeaderString

  BuildArtifacts:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [CreateBuildArtifactsBucket, !Ref BuildArtifactBucketName, !Ref "AWS::NoValue"]
      LifecycleConfiguration:
        Rules:
          -
            ExpirationInDays: 1
            NoncurrentVersionExpirationInDays: 2
            Status: Enabled
            Prefix: !Ref ProjectSlug
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  BuildArtifactsPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref BuildArtifacts
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Action: "s3:GetObject"
            Effect: "Allow"
            Principal:
              Service: 'codepipeline.amazonaws.com'
            Resource: !Join ['', [!GetAtt BuildArtifacts.Arn, !Sub "/${ProjectSlug}/static.zip"]]

  StaticDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 'codepipeline.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Sub "${ProjectSlug}-StaticDeploy"

  StaticDeployPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${ProjectSlug}-pipeline-StaticDeploy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectSlug}-StaticPipeline"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectSlug}-StaticPipeline:*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codepipeline/${StaticPipeline}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codepipeline/${StaticPipeline}:*"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:GetBucketAcl"
              - "s3:GetBucketLocation"
            Resource:
              - !Sub "${BuildArtifacts.Arn}/${ProjectSlug}"
              - !Sub "${BuildArtifacts.Arn}/${ProjectSlug}/*"
          -
            Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObjectVersion"
              - "s3:GetBucketAcl"
              - "s3:GetBucketLocation"
            Resource:
              - !GetAtt StaticSiteFiles.Arn
              - !Sub "${StaticSiteFiles.Arn}/*"
          -
            Action:
              - "iam:PassRole"
            Resource: "*"
            Effect: "Allow"
            Condition:
              StringEqualsIfExists:
                  "iam:PassedToService":
                    - "cloudformation.amazonaws.com"
                    - "elasticbeanstalk.amazonaws.com"
                    - "ec2.amazonaws.com"
                    - "ecs-tasks.amazonaws.com"
          -
            Action:
              - "codecommit:CancelUploadArchive"
              - "codecommit:GetBranch"
              - "codecommit:GetCommit"
              - "codecommit:GetUploadArchiveStatus"
              - "codecommit:UploadArchive"
            Resource: "*"
            Effect: "Allow"
          -
            Action:
              - "codedeploy:CreateDeployment"
              - "codedeploy:GetApplication"
              - "codedeploy:GetApplicationRevision"
              - "codedeploy:GetDeployment"
              - "codedeploy:GetDeploymentConfig"
              - "codedeploy:RegisterApplicationRevision"
            Resource: "*"
            Effect: "Allow"
          -
            Action:
              - "codestar-connections:UseConnection"
            Resource: "*"
            Effect: "Allow"
          -
            Action:
              - "elasticbeanstalk:*"
              - "ec2:*"
              - "elasticloadbalancing:*"
              - "autoscaling:*"
              - "cloudwatch:*"
              - "s3:*"
              - "sns:*"
              - "cloudformation:*"
              - "rds:*"
              - "sqs:*"
              - "ecs:*"
            Resource: "*"
            Effect: "Allow"
          -
            Action:
              - "lambda:InvokeFunction"
              - "lambda:ListFunctions"
            Resource: "*"
            Effect: "Allow"
          -
            Action:
              - "opsworks:CreateDeployment"
              - "opsworks:DescribeApps"
              - "opsworks:DescribeCommands"
              - "opsworks:DescribeDeployments"
              - "opsworks:DescribeInstances"
              - "opsworks:DescribeStacks"
              - "opsworks:UpdateApp"
              - "opsworks:UpdateStack"
            Resource: "*"
            Effect: "Allow"
          -
            Action:
              - "cloudformation:CreateStack"
              - "cloudformation:DeleteStack"
              - "cloudformation:DescribeStacks"
              - "cloudformation:UpdateStack"
              - "cloudformation:CreateChangeSet"
              - "cloudformation:DeleteChangeSet"
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:SetStackPolicy"
              - "cloudformation:ValidateTemplate"
            Resource: "*"
            Effect: "Allow"
          -
            Action:
              - "codebuild:BatchGetBuilds"
              - "codebuild:StartBuild"
              - "codebuild:BatchGetBuildBatches"
              - "codebuild:StartBuildBatch"
            Resource: "*"
            Effect: "Allow"
          -
            Effect: "Allow"
            Action:
              - "devicefarm:ListProjects"
              - "devicefarm:ListDevicePools"
              - "devicefarm:GetRun"
              - "devicefarm:GetUpload"
              - "devicefarm:CreateUpload"
              - "devicefarm:ScheduleRun"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "servicecatalog:ListProvisioningArtifacts"
              - "servicecatalog:CreateProvisioningArtifact"
              - "servicecatalog:DescribeProvisioningArtifact"
              - "servicecatalog:DeleteProvisioningArtifact"
              - "servicecatalog:UpdateProduct"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "cloudformation:ValidateTemplate"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "ecr:DescribeImages"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "states:DescribeExecution"
              - "states:DescribeStateMachine"
              - "states:StartExecution"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "appconfig:StartDeployment"
              - "appconfig:StopDeployment"
              - "appconfig:GetDeployment"
            Resource: "*"
      Roles:
        - !Ref StaticDeployRole

  ManualVerificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${ProjectSlug}-ManualVerificationTopic"
      Subscription:
        -
          Protocol: email
          Endpoint: !Ref ManualVerificationEmail

  StaticPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref BuildArtifacts
      Name: !Sub "${ProjectSlug}-StaticSite"
      RoleArn: !GetAtt StaticDeployRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket: !Ref BuildArtifacts
                S3ObjectKey: !Sub "${ProjectSlug}/static.zip"
                PollForSourceChanges: true
              Name: "StaticBuild-artifact"
              OutputArtifacts:
                - Name: staticZip
              RunOrder: 1
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket: !Ref BuildArtifacts
                S3ObjectKey: !Sub "${ProjectSlug}/source.zip"
                PollForSourceChanges: false
              Name: "StaticBuild-artifact-source"
              OutputArtifacts:
                - Name: sourceZip
              RunOrder: 2
        -
          Name: Stage
          Actions:
            -
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName: !Ref StaticSiteFiles
                ObjectKey: !Sub "${ProjectSlug}/stage"
                Extract: true
              Name: "StaticBuild-stage"
              InputArtifacts:
                - Name: staticZip
              RunOrder: 1
            -
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref StaticTest
              Name: "StaticTest-stage"
              InputArtifacts:
                - Name: sourceZip
              RunOrder: 2
            -
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              Configuration:
                CustomData: |
                  Review the staging website before pushing change to
                  production.
                ExternalEntityLink: !Sub "http://${CloudFrontStaging.DomainName}"
                NotificationArn: !Ref ManualVerificationTopic
              Name: "approval-stage"
              RunOrder: 3

        -
          Name: Deploy
          Actions:
            -
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName: !Ref StaticSiteFiles
                ObjectKey: !Sub "${ProjectSlug}/production"
                Extract: true
              Name: "StaticBuild-deploy"
              InputArtifacts:
                - Name: staticZip
              RunOrder: 1

        # TODO: Add cleanup stage
        # - Run invalidations for index.html (after origins have been changed to
        #   cache them again).
        # - Disable stage cf distribution
        # - Delete unused versions (any version that is not blue or green) in StaticSiteFiles production object path.
        # - Delete StaticSiteFiles stage object path
        # - Copy 'error.html' from GreenVersion to StaticSiteFiles production
        #   path "${ProjectSlug}/production/error.html".

  StaticBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 'codebuild.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Sub "${ProjectSlug}-StaticBuild"

  StaticBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${ProjectSlug}-codebuild-StaticBuild"
      Roles:
        - !Ref StaticBuildServiceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectSlug}-StaticBuild"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectSlug}-StaticBuild:*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${StaticBuild}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${StaticBuild}:*"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
          -
            Effect: "Allow"
            Resource:
              - !Sub "${BuildArtifacts.Arn}/${ProjectSlug}"
              - !Sub "${BuildArtifacts.Arn}/${ProjectSlug}*"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:GetObjectVersion"
              - "s3:GetBucketAcl"
              - "s3:GetBucketLocation"
          -
            Effect: "Allow"
            Resource:
              - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group:${ProjectSlug}-StaticBuild-*"
            Action:
              - "codebuild:CreateReportGroup"
              - "codebuild:CreateReport"
              - "codebuild:UpdateReport"
              - "codebuild:BatchPutTestCases"
              - "codebuild:BatchPutCodeCoverages"
          -
            Effect: "Allow"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectSlug}/*"
            Action:
              - "ssm:GetParameters"

  StaticBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: S3
        Location: !Ref BuildArtifacts
        Name: !Ref ProjectSlug
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-StaticBuild"
          Status: ENABLED
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 10
      ServiceRole: !Ref StaticBuildServiceRole
      Source:
        Auth:
          Type: OAUTH
        # GitCloneDepth set to 0 to support git submodule checkout
        GitCloneDepth: 0
        Location: !Ref GitHubCloneURL
        Type: GITHUB
      TimeoutInMinutes: 10
      Triggers:
        Webhook: true
        FilterGroups:
          -
            -
              Type: EVENT
              Pattern: PUSH
              ExcludeMatchedPattern: false
            -
              ExcludeMatchedPattern: false
              Pattern: !Ref PatternToTriggerBuild
              Type: HEAD_REF

  StaticTest:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      ServiceRole: !Ref StaticBuildServiceRole
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: STAGING_URL
            Type: PLAINTEXT
            Value: !Sub "http://${CloudFrontStaging.DomainName}"
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-integration.yml
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-StaticBuild"
          Status: ENABLED

  # CloudFront distribution with an origin group. The origins in the origin
  # group are swapped when doing blue-green deployments.
  CloudFrontStaging:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: "blue-green-failover"
          # Managed-CachingDisabled
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_100
        OriginGroups:
          Items:
            -
              Id: "blue-green-failover"
              FailoverCriteria:
                StatusCodes:
                  Items:
                    - 404
                  Quantity: 1
              Members:
                Items:
                  -
                    OriginId: "green"
                  -
                    OriginId: "blue"
                Quantity: 2
          Quantity: 2
        Origins:
          -
            Id: "blue"
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/stage/${BlueVersion}"

          -
            Id: "green"
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/stage/${GreenVersion}"

        CacheBehaviors:
          -
            PathPattern: '*/index.html'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          -
            PathPattern: '*/'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          -
            PathPattern: 'index.html'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          -
            PathPattern: '/'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"

  CloudFrontProduction:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: "blue-green-failover"
          # Managed-CachingOptimized
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_All
        OriginGroups:
          Items:
            -
              Id: "blue-green-failover"
              FailoverCriteria:
                StatusCodes:
                  Items:
                    - 404
                  Quantity: 1
              Members:
                Items:
                  -
                    OriginId: "green"
                  -
                    OriginId: "blue"
                Quantity: 2
          Quantity: 2
        Origins:
          -
            Id: "blue"
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/production/${BlueVersion}"

          -
            Id: "green"
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/production/${GreenVersion}"

        CacheBehaviors:
          -
            PathPattern: '*/index.html'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          -
            PathPattern: '*/'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          -
            PathPattern: 'index.html'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          -
            PathPattern: '/'
            TargetOriginId: "blue-green-failover"
            ViewerProtocolPolicy: allow-all
            # Managed-CachingDisabled
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"

  StaticSiteDomainProduction:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: www.weboftomorrow.com.
      Type: A
      AliasTarget:
        # Z2FDTNDATAQYW2 is the hosted zone id of cloudfront domain name.
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !Sub "http://${CloudFrontStaging.DomainName}"

Outputs:
  ProductionWebsiteURL:
    Value: !Ref StaticSiteDomainProduction
  StagingWebsiteURL:
    Value: !Sub "http://${CloudFrontStaging.DomainName}"
